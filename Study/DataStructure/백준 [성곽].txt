//백준 [성곽]
// dfs OR bfs
#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
int R, C;
int map[51][51];
bool visited[51][51];
int dx[]={-1,0,1,0};
int dy[]={0,-1,0,1};
int cnt=0;
int max_cnt=0;
int room = 0;
void spread(int x, int y){
    visited[y][x] = true;
    cnt++;
    for(int d=0; d<4; d++){
        if(((map[y][x]>>d) & 1 )==0){ // 왼 위 오 아래
            int ny =y+dy[d];
            int nx =x+dx[d];
            if(0<= nx && nx<C && 0<=ny &&ny<R && visited[ny][nx]==false){
                spread(nx,ny);
            }
        }
    }
    
}
void run(){
    for(int r=0; r<R; r++){
        for(int c=0; c<C; c++){
            if(visited[r][c] == false){
                spread(c,r);
                max_cnt = max(cnt , max_cnt);
                cnt=0;
                room++;
            }
        }
    }
}
void run2(int x, int y){
    for(int d=0; d<4; d++){
        if((map[y][x] & (int)pow(2,d)) != 0){
            for(int r=0; r<R; r++){
                for(int c=0;c<C; c++){
                    visited[r][c] = false;
                }
            }
            map[y][x] = map[y][x] - (int)pow(2,d);
            run();
            map[y][x] = map[y][x] + (int)pow(2,d);
        }
    }
    
}
int main(){
    cin >> C >> R;
    for(int r=0; r<R; r++){
        for(int c=0; c<C; c++){
            cin >> map[r][c];
            visited[r][c] = false;
        }
    }
    run();
    cout << room<<"\n"<<max_cnt <<"\n" ;
    max_cnt =0;
    for(int r=0; r<R; r++){
        for(int c=0;c<C; c++){
            run2(c,r);
        }
    }
    cout <<max_cnt<<"\n";
    return 0;
}