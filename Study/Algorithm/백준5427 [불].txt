// 백준5427 불 문제
// bfs 두개의 QUEUE 사용
#include<iostream>
#include<string>
#include<vector>
#include<queue>
using namespace std;
int N, M;
int map[1000][1000];
bool visited[1000][1000];
queue<pair<int, int>> FIRE;
queue<pair<int, int>> MAN;
int dx[]={0,0,-1,1};
int dy[]={-1,1,0,0,};
int sol=-1;
vector<string> solution;

void spread(){
    int size = (int)FIRE.size();
    for(int k=0; k <size; k++){
        int y = FIRE.front().first;
        int x = FIRE.front().second;
        FIRE.pop();
        for(int d=0; d<4; d++){
            if( 0<=x+dx[d]&& x+dx[d]<M && 0<=y+dy[d]&& y+dy[d]<N ){
                if(map[y+dy[d]][x+dx[d]] == 0){
                    map[y+dy[d]][x+dx[d]] = 2;
                    FIRE.push(make_pair(y+dy[d],x+dx[d]));
                }
            }
        }
    }
}
int manMove(){
    int size = (int)MAN.size();
    if(size == 0){
        return -1;
    }
    for(int k=0; k<size; k++){
        int y = MAN.front().first;
        int x= MAN.front().second;
        visited[y][x]=true;
        MAN.pop();
        for(int d=0; d<4; d++){
            if( 0<=x+dx[d]&& x+dx[d]<M && 0<=y+dy[d]&& y+dy[d]<N ){
                if(map[y+dy[d]][x+dx[d]] == 0&& !visited[y+dy[d]][x+dx[d]] ){
                    MAN.push(make_pair(y+dy[d],x+dx[d]));
                }
            }else{ //탈출
                while(!MAN.empty()){
                    MAN.pop();
                }
                return 0;
            }
        }
    }
    return 1;
}
void printMap(){
    cout<<"\n";
    for(int r=0; r <N; r++){
        for(int c=0; c<M; c++){
            cout << map[r][c] << " ";
        }cout << "\n";
    }cout << "\n";

}
int main(){
    int T;
    cin >> T;
    string input_string;
    for(int tc =0 ; tc < T ; tc++){
        cin >> M >> N; // 가로 세로
        for(int r=0; r < N ; r++){
            cin >> input_string;
            for(int c=0; c< M; c++){
                if(input_string[c]== '#'){ //wall -1
                    map[r][c] = 5;
                }else if(input_string[c]== '*'){ //fire 2
                    map[r][c]=2;
                    FIRE.push(make_pair(r,c));//y, x
                }else if(input_string[c]== '@'){ //man 1
                    map[r][c]=1;
                    MAN.push(make_pair(r,c));
                }else if(input_string[c]== '.'){ //road 0
                    map[r][c]=0;
                }
                
                visited[r][c]=false;
            }
        }
        int sol = 0;
        int judge =0;
        while(true){
            sol++;
            spread();
            judge = manMove();
            if(judge==-1){
                solution.push_back("IMPOSSIBLE");
                break;
            }else if(judge==0){
                solution.push_back(to_string(sol));
                break;
            }
        }
        //initialize
        while(!FIRE.empty()){
            FIRE.pop();
        }
        while(!MAN.empty()){
            MAN.pop();
        }
        sol=-1;
    }
    for(int t=0; t< solution.size(); t++)
        cout << solution[t] <<"\n";
    return 0;
}