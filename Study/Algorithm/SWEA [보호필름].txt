// SWEA [보호필름]
// 복구할때 해당 최소로 복구하기 ==> Map 전체를 복구하니가 시간 몇 배로 걸린다.
// 테스트케이스 만들기 --> boundary 값 확인하기
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
int map[14][21];
int copy_map[14][21];
int D,W,K;
int min_num = 987654321;
vector<int> _select;
bool check(){
    bool flag=false;
    for(int c=0; c<W; c++){
        int num = 1;
        for(int r=1; r<D; r++){
            if(map[r-1][c]==map[r][c]){
                num++;
            }else{
                num =1;
            }
            if(num== K){
                flag = true;
            }
        }
        if(flag==false){
            return false;
        }
        flag = false;
    }
    return true;
}
void draw(int s, int type){
    for(int c=0; c<W; c++){
        map[s][c]=type;
    }
}
void choice(int s, int d){
    if(min_num!=987654321)
        return;
    if(s==d){
        if(check()){
            min_num =min(min_num, s);
            return;
        }
    }else{
        // 0으로 약품
        for(int c=0; c<W; c++){
            map[_select[d]][c]=0;
        }
        choice(s,d+1);
        for(int c=0; c<W; c++){
            map[_select[d]][c]=copy_map[_select[d]][c];
        }
        
        if(min_num!=987654321)
            return;
        
        // 1로 약품
        for(int c=0; c<W; c++){
            map[_select[d]][c]=1;
        }
        choice(s,d+1);
        for(int c=0; c<W; c++){
            map[_select[d]][c]=copy_map[_select[d]][c];
        }
    }
}

void dfs(int s,int sel ,int d){
    if(min_num!=987654321)
        return;
    if(d <= D){
        if(s==sel){
            // choice
            choice(sel,0);
        }else{
            _select.push_back(d);
            dfs(s+1,sel,d+1);
            _select.pop_back();
            dfs(s,sel,d+1);
        }
    }
}


int main(){
    int T;
    cin >>T;
    for(int t=1; t<=T; t++){
        cin >> D >> W >> K;
        for(int r=0 ;r<D; r++){
            for(int c=0; c<W; c++){
                cin >>map[r][c];
                copy_map[r][c] = map[r][c];
            }
        }
        if(check()){
            cout << "#"<<t<< " "<< 0<<"\n";
            continue;
        }
        for(int sel=1; sel<K; sel++){
            dfs(0,sel,0);
            if(min_num != 987654321){
                break;
            }
        }
        if(min_num == 987654321){
            min_num=K;
        }
        
        cout << "#"<<t<<" "<<min_num<<"\n";
        min_num=987654321;
        _select.clear();
    }
    return 0;
}