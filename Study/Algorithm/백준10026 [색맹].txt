//백준10026 [색맹]

#include<iostream>
#include<string>
using namespace std;
int map[101][101];
bool visited[101][101];
int N;
int dx[]={0,0,-1,1};
int dy[]={-1,1,0,0};

void recursion(int x, int y, int type){
    visited[y][x]=true;
    if(type != 0){
        for(int d=0; d< 4; d++){
            if(0<=x+dx[d]&&x+dx[d]<N&& 0<=y+dy[d] && y+dy[d]<N ){
                if(!visited[y+dy[d]][x+dx[d]] && map[y+dy[d]][x+dx[d]]!=0 ){
                    recursion(x+dx[d],y+dy[d],type);
                }
            }
        }
    }else{
        for(int d=0; d< 4; d++){
            if(0<=x+dx[d]&&x+dx[d]<N&& 0<=y+dy[d] && y+dy[d]<N ){
                if(!visited[y+dy[d]][x+dx[d]] && map[y+dy[d]][x+dx[d]]==0 ){
                    recursion(x+dx[d],y+dy[d],type);
                }
            }
        }
    }
}
void recursion2(int x, int y, int type){
    visited[y][x]=true;
    for(int d=0; d< 4; d++){
        if(0<=x+dx[d]&&x+dx[d]<N&& 0<=y+dy[d] && y+dy[d]<N ){
            if(!visited[y+dy[d]][x+dx[d]] && map[y+dy[d]][x+dx[d]]==type ){
                recursion2(x+dx[d],y+dy[d],type);
            }
        }
    }
}

int main(){
    cin >>N;
    string temp_str;
    for(int r=0; r<N; r++){
        cin >> temp_str;
        for(int c=0; c<N; c++){
            if(temp_str[c] == 'R'){
                map[r][c]=1;
            }else if(temp_str[c] == 'G'){
                map[r][c]=2;
            }else if(temp_str[c] == 'B'){
                map[r][c]=0;
            }
        }
    }
    int solA=0;
    int solB=0;
    for(int r=0; r<N; r++){
        for(int c=0; c<N; c++){
            if(!visited[r][c]){
                recursion(c,r,map[r][c]);
                solA++;
            }
        }
    }
    for(int r=0; r<N; r++){
        for(int c=0; c<N; c++){
            visited[r][c]=false;
        }
    }
    
    for(int r=0; r<N; r++){
        for(int c=0; c<N; c++){
            if(!visited[r][c]){
                recursion2(c,r,map[r][c]);
                solB++;
            }
        }
    }
    
    cout << solB << " "<< solA;
    return 0;
}