//백준1063 킹
// 시뮬레이션
#include<iostream>
#include<string>
#include<vector>
using namespace std;
vector<int> DIR;
int dx[]={1,-1,0,0,1,-1,1,-1};
int dy[]={0,0,-1,1,1,1,-1,-1};
pair<int, int> king, stone;
string conversion(pair<int,int> temp){
    string s="";
    s += (char)(temp.second + (int)'A');
    s += (char)(temp.first +(int)'1');
    return s;
}
void go(){
    for(int d=0; d<DIR.size(); d++){
        if( 0<=king.first + dy[DIR[d]] && king.first+dy[DIR[d]]<8
           && 0<=king.second + dx[DIR[d]] && king.second+dx[DIR[d]]<8){
            if(king.first + dy[DIR[d]] ==stone.first && king.second+dx[DIR[d]] == stone.second){
                if( 0<=stone.first + dy[DIR[d]] && stone.first+dy[DIR[d]]<8
                   && 0<=stone.second + dx[DIR[d]] && stone.second+dx[DIR[d]]<8){
                stone.first += dy[DIR[d]];
                stone.second+= dx[DIR[d]];
                }else{
                    continue;
                }
            }
            king.first += dy[DIR[d]];
            king.second+= dx[DIR[d]];
        }//        cout << conversion(king) << " " << conversion(stone)<<"\n";
    }
}


int main(){
    string KING, STONE;
    cin >> KING >> STONE;
    int N;
    cin >> N;
    string temp;
    for(int n=0; n<N; n++){
        cin >>temp;
        if(temp.compare("R")==0){
            DIR.push_back(0);
        }else if(temp.compare("L")==0){
            DIR.push_back(1);
        }else if(temp.compare("B")==0){
            DIR.push_back(2);
        }else if(temp.compare("T")==0){
            DIR.push_back(3);
        }else if(temp.compare("RT")==0){
            DIR.push_back(4);
        }else if(temp.compare("LT")==0){
            DIR.push_back(5);
        }else if(temp.compare("RB")==0){
            DIR.push_back(6);
        }else if(temp.compare("LB")==0){
            DIR.push_back(7);
        }
    }
    king.second = (int)KING[0] - (int)'A';
    king.first =(int)KING[1] - (int)'1';
    stone.second = (int)STONE[0] - (int)'A';
    stone.first =(int)STONE[1] -(int)'1';
    go();
    cout << conversion(king) << "\n" << conversion(stone);
    
    return 0;
}